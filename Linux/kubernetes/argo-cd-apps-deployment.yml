apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cloudflare
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'git@github.com:Gamer-Iris/MyServerTest.git'
    targetRevision: HEAD
    path: './Linux/kubernetes/apps/cloudflare'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: cloudflare
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: coredns
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'git@github.com:Gamer-Iris/MyServerTest.git'
    targetRevision: HEAD
    path: './Linux/kubernetes/apps/coredns'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: coredns
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mariadb-phpmyadmin
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'git@github.com:Gamer-Iris/MyServerTest.git'
    targetRevision: HEAD
    path: './Linux/kubernetes/apps/mariadb-phpmyadmin'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: mariadb-phpmyadmin
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: metallb
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'git@github.com:Gamer-Iris/MyServerTest.git'
    targetRevision: HEAD
    path: './Linux/kubernetes/apps/metallb'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: metallb
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: minecraft
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'git@github.com:Gamer-Iris/MyServerTest.git'
    targetRevision: HEAD
    path: './Linux/kubernetes/apps/minecraft'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: minecraft
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'https://prometheus-community.github.io/helm-charts'
    targetRevision: 65.*
    chart: kube-prometheus-stack
    helm:
      parameters:
        - name: alertmanager.config.receivers[0].name
          value: 'null'
        - name: alertmanager.config.receivers[0].discord_configs[0].webhook_url
          value: 'https://discord.com/api/webhooks/1075045469530640446/UGb5aprc925oVUjosUqbj9_D1MPYqZvDHXhwJ3qeBiSQlvuRN3GvaRRK8EEMIOpgeYMj'
        - name: alertmanager.service.loadBalancerIP
          value: '192.168.11.71'
        - name: alertmanager.service.type
          value: 'LoadBalancer'
        - name: alertmanager.servicePerReplica.type
          value: 'LoadBalancer'
        - name: alertmanager.alertmanagerSpec.storage.volumeClaimTemplate.spec.storageClassName
          value: 'alertmanager-nfs-storage-class'
        - name: alertmanager.alertmanagerSpec.storage.volumeClaimTemplate.spec.accessModes[0]
          value: ReadWriteOnce
        - name: alertmanager.alertmanagerSpec.storage.volumeClaimTemplate.spec.resources.requests.storage
          value: '1Gi'
        - name: alertmanager.alertmanagerSpec.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: grafana.deploymentStrategy.type
          value: 'Recreate'
        - name: grafana.persistence.enabled
          value: 'true'
        - name: grafana.persistence.type
          value: 'pvc'
        - name: grafana.persistence.storageClassName
          value: 'grafana-nfs-storage-class'
        - name: grafana.persistence.accessModes[0]
          value: ReadWriteOnce
        - name: grafana.persistence.size
          value: '1Gi'
        - name: grafana.persistence.finalizers
          value: '["kubernetes.io/pvc-protection"]'
        - name: grafana.initChownData.enabled
          value: 'false'
        - name: grafana.defaultDashboardsTimezone
          value: 'jst'
        - name: grafana.securityContext.runAsUser
          value: '1000'
        - name: grafana.securityContext.runAsGroup
          value: '1000'
        - name: grafana.securityContext.fsGroup
          value: '1000'
        - name: grafana.service.type
          value: 'LoadBalancer'
        - name: grafana.service.loadBalancerIP
          value: '192.168.11.72'
        - name: grafana.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: grafana.imageRenderer.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: kube-state-metrics.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: prometheus.thanosService.type
          value: 'LoadBalancer'
        - name: prometheus.service.loadBalancerIP
          value: '192.168.11.73'
        - name: prometheus.service.type
          value: 'LoadBalancer'
        - name: prometheus.servicePerReplica.type
          value: 'LoadBalancer'
        - name: prometheus.prometheusSpec.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.storageClassName
          value: 'prometheus-nfs-storage-class'
        - name: prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.accessModes[0]
          value: ReadWriteOnce
        - name: prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage
          value: '1Gi'
        - name: prometheus.prometheusSpec.securityContext.runAsGroup
          value: '0'
        - name: prometheus.prometheusSpec.securityContext.runAsNonRoot
          value: 'false'
        - name: prometheus.prometheusSpec.securityContext.runAsUser
          value: '0'
        - name: prometheus.prometheusSpec.securityContext.fsGroup
          value: '0'
        - name: prometheusOperator.admissionWebhooks.deployment.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: prometheusOperator.admissionWebhooks.patch.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: prometheusOperator.nodeSelector.labelname
          value: 'ubuntu-302'
        - name: thanosRuler.thanosRulerSpec.nodeSelector.labelname
          value: 'ubuntu-302'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: sealed-secrets
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'git@github.com:Gamer-Iris/MyServerTest.git'
    targetRevision: HEAD
    path: './Linux/kubernetes/apps/sealed-secrets'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: sealed-secrets
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: wordpress
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'git@github.com:Gamer-Iris/MyServerTest.git'
    targetRevision: HEAD
    path: './Linux/kubernetes/apps/wordpress'
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: wordpress
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
